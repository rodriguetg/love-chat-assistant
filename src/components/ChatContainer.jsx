import React, { useState, useRef, useEffect } from 'react'
import { motion } from 'framer-motion'
import ChatHeader from './ChatHeader'
import MessageList from './MessageList'
import ChatInput from './ChatInput'
import SuggestionChips from './SuggestionChips'
import { generateBotResponse } from '../services/chatService'

const ChatContainer = () => {
  const [messages, setMessages] = useState([])
  const [isTyping, setIsTyping] = useState(false)
  const messagesEndRef = useRef(null)

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  useEffect(() => {
    // Message d'accueil initial
    const welcomeMessage = {
      id: 1,
      content: "Bonjour ! üíï Je suis Armony, votre conseill√®re en relations amoureuses d√©velopp√©e par l'√©quipe de PEM (Rodrigue GBADOU, Loana LAMBERT, Louise MAKIALA MATOMA, Farah M√©lissa AHMED, In√®s DAOUDI, Aur√©lien YOMI).\n\nJe suis ici pour vous aider avec :\n‚Ä¢ Conseils pour les premiers rendez-vous\n‚Ä¢ Gestion des relations et communication\n‚Ä¢ Surmonter les ruptures\n‚Ä¢ Retrouver confiance en soi\n\nComment puis-je vous aider aujourd'hui ? üòä",
      isUser: false,
      timestamp: new Date()
    }

    const timer = setTimeout(() => {
      setMessages([welcomeMessage])
    }, 500)

    return () => clearTimeout(timer)
  }, [])

  const handleSendMessage = async (content) => {
    if (!content.trim()) return

    const userMessage = {
      id: Date.now(),
      content: content.trim(),
      isUser: true,
      timestamp: new Date()
    }

    setMessages(prev => [...prev, userMessage])
    setIsTyping(true)

    try {
      // Simuler un d√©lai de r√©ponse r√©aliste
      await new Promise(resolve => setTimeout(resolve, 1500 + Math.random() * 2000))
      
      const botResponse = generateBotResponse(content)
      const botMessage = {
        id: Date.now() + 1,
        content: botResponse,
        isUser: false,
        timestamp: new Date()
      }

      setMessages(prev => [...prev, botMessage])
    } catch (error) {
      console.error('Erreur lors de la g√©n√©ration de la r√©ponse:', error)
      const errorMessage = {
        id: Date.now() + 1,
        content: "D√©sol√©e, je rencontre une petite difficult√©. Pouvez-vous reformuler votre question ? üíï",
        isUser: false,
        timestamp: new Date()
      }
      setMessages(prev => [...prev, errorMessage])
    } finally {
      setIsTyping(false)
    }
  }

  const suggestions = [
    "Comment trouver l'amour ?",
    "Comment g√©rer une rupture ?",
    "Conseils pour le premier rendez-vous",
    "Comment am√©liorer la communication dans mon couple ?",
    "Je manque de confiance en moi",
    "Mon partenaire ne me comprend pas"
  ]

  return (
    <motion.div 
      initial={{ opacity: 0, scale: 0.95 }}
      animate={{ opacity: 1, scale: 1 }}
      transition={{ duration: 0.5 }}
      className="max-w-4xl mx-auto h-screen flex flex-col bg-white/90 backdrop-blur-sm shadow-2xl md:my-5 md:rounded-2xl md:h-[calc(100vh-2.5rem)] overflow-hidden"
    >
      <ChatHeader />
      
      <div className="flex-1 flex flex-col overflow-hidden">
        <MessageList 
          messages={messages} 
          isTyping={isTyping}
        />
        <div ref={messagesEndRef} />
      </div>

      <div className="bg-white/95 backdrop-blur-sm border-t border-pink-100">
        <SuggestionChips 
          suggestions={suggestions}
          onSuggestionClick={handleSendMessage}
        />
        <ChatInput onSendMessage={handleSendMessage} />
      </div>
    </motion.div>
  )
}

export default ChatContainer
